

.container#funciones

    .header-ecored

        h1 1. Funciones
    
    .row.mx-0.recuadro1

        .col-12

            p Las funciones hacen posible que los programas en lenguaje C++ no sean escritos en su totalidad dentro de la función principal o main, sino que se realice una subdivisión en pequeños módulos que se encargan, cada uno, de ejecutar una acción diferente para dar solución al problema general planteado en la aplicación o programa a desarrollar.

            p Cada una de las funciones creadas en un programa es independiente y debe ser llamada desde la función main en el orden correcto, de acuerdo con los requerimientos de la aplicación que se esté desarrollando.

            p Las funciones se definen de diferentes tipos y dicho tipo dependerá siempre del dato que estas deban retornar.

        .col-12.text-center

            img(src="assets/images/pages/img1.svg", style="max-width: 100%").mt-5.img-fluid

    br

    .row.mx-0.recuadro1

        .col-12.icon.utilidad

            p.m-0.text-icon
                b Utilidad
        
        .col-12.py-3

            p El uso principal que se da a las funciones consiste en una mejor estructuración del código, que permite a su vez efectuar un mantenimiento del sistema con mayor facilidad y reutilizar los módulos escritos en diferentes aplicaciones creadas.

        .row.mx-0.recuadro2.align-items-center.mb-3

            .col-2.text-center.p-2

                img(src="assets/images/pages/img3.svg", style="max-width: 100%").img-fluid

            .col-10.p-2

                p.m-0 La solución de un programa subdividido en funciones, que se encargan por separado de tareas específicas requeridas, hace de este una codificación más entendible y organizada.

    br

    .row.mx-0.recuadro1

        .col-12.icon.sintaxis

            p.m-0.text-icon
                b Sintaxis
        
        .col-12.py-3

            p Para utilizar funciones es preciso llevar a cabo tres operaciones que consisten en declararlas, definirlas y llamarlas; la declaración se trata de algo que se denomina prototipo y es preciso realizarla antes de escribir el conjunto de sentencias que indican la tarea que la función debe ejecutar.  Este prototipo se encuentra compuesto por el tipo de función, nombre de la función, tipo y nombre de parámetros y finalmente un punto y coma (;), es decir, que el prototipo consiste únicamente en una línea de código así:
        
        .col-12

            img(src="assets/images/pages/img5.svg", style="max-width: 100%").img-fluid

        .col-12.py-3

            p En la operación siguiente se trata de definir el conjunto de sentencias para la tarea específica que la función debe realizar. Dicha sintaxis se muestra a continuación:

        .col-12

            img(src="assets/images/pages/img6.svg", style="max-width: 100%").img-fluid

        .row.mx-0.recuadro2.align-items-center.my-3

            .col-2.text-center.p-2

                img(src="assets/images/pages/img7.svg", style="max-width: 100%").img-fluid

            .col-10.p-2

                p.m-0 El tipo está relacionado directamente con el valor que la función debe retornar. Si la función es de tipo entero, quiere decir que retorna un valor entero; si es de tipo flotante, significa que retorna un valor flotante y así sucesivamente; en cambio, si es de tipo void significa que no retorna ningún valor.
        
        .col-12

            p Luego se definen los parámetros, que consisten en cierta información que requieren algunas funciones con el fin de ejecutar la tarea para la cual son creadas; dichos parámetros son en realidad variables utilizadas dentro de las instrucciones de la función.

            p Posteriormente se encuentran las instrucciones que son las líneas de código donde se realiza todo lo necesario para que la función ejecute la tarea que le fue asignada.

            p Finalmente estaría la operación de llamado (invocación), cuya sintaxis sería así:

        .col-12

            img(src="assets/images/pages/img8.svg", style="max-width: 100%").img-fluid

        .col-12.pt-3

            p En el llamado no es necesario indicar el tipo de dato de cada parámetro ni el de la función, basta con mencionar su nombre y las variables que contienen los argumentos respectivos, terminando la línea de código con un punto y coma (;).

    br

    .row.mx-0.recuadro1

        .col-12.icon.invocacion

            p.m-0.text-icon
                b Invocación
        
        .col-12.py-3

            p La invocación consiste en la forma en que las funciones deben ser utilizadas dentro del programa, estas se declaran por separado y se llaman o invocan dentro de la función main, de acuerdo con las necesidades de la aplicación.

        .row.mx-0.recuadro2.align-items-center

            .col-2.text-center.p-2

                img(src="assets/images/pages/img10.svg", style="max-width: 100%").img-fluid

            .col-10.p-2

                p.m-0 El llamado puede hacerse directamente, o bien dentro de una variable, dependiendo del tipo de función que haya sido declarada y la manera en que la información deba mostrarse al usuario.